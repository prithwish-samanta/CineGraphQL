type Query {
    movie(id: ID!): Movie
    movies(page: Int!, pageSize: Int!): [Movie]
    searchMovies(query: String!): [Movie]
    genres: [Genre]
    actor(actorId: ID!): Actor
    director(directorId: ID!): Director
}

type Mutation{
    registerUser(input: UserRegistrationInput!): User
    addUserRating(input: UserRatingInput!): UserRating
}

type Movie {
    movieId: ID!
    title: String!
    releaseDate: String
    duration: Int
    plotSummary: String
    posterUrl: String
    trailerUrl: String
    genres: [Genre]
    actors: [Actor]
    directors: [Director]
    userRatings: [UserRating]
}

type Genre {
    genreId: ID!
    name: String!
}

type Actor {
    actorId: ID!
    name: String!
    birthDate: String
    biography: String
    profilePictureUrl: String
}

type Director {
    directorId: ID!
    name: String!
    birthDate: String
    biography: String
    profilePictureUrl: String
}

type User{
    userId: ID!
    username: String!
    email: String!
}

type UserRating {
    user: User!
    movie: Movie!
    rating: Float!
    review: String!
}

input UserRegistrationInput {
    username: String!
    password: String!
    email: String!
}

input UserRatingInput {
    userId: ID!
    movieId: ID!
    rating: Float!
    review: String!
}